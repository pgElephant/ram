version: 2.1

# Define reusable commands
commands:
  install-dependencies:
    description: "Install system dependencies"
    steps:
      - run:
          name: "Update package list"
          command: |
            sudo apt-get update -y
      - run:
          name: "Install PostgreSQL and development tools"
          command: |
            sudo apt-get install -y \
              postgresql-12 \
              postgresql-server-dev-12 \
              postgresql-client-12 \
              build-essential \
              make \
              gcc \
              libc6-dev \
              pkg-config \
              libpq-dev \
              git \
              curl

  setup-postgresql:
    description: "Setup PostgreSQL for testing"
    steps:
      - run:
          name: "Start PostgreSQL service"
          command: |
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
      - run:
          name: "Create test database and user"
          command: |
            sudo -u postgres psql -c "CREATE DATABASE testdb;"
            sudo -u postgres psql -c "CREATE USER testuser WITH PASSWORD 'testpass';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;"
            sudo -u postgres psql -c "ALTER USER testuser CREATEDB;"

  build-pgraft:
    description: "Build pgraft extension"
    steps:
      - run:
          name: "Build pgraft extension"
          command: |
            cd pgraft
            make clean
            make
      - run:
          name: "Install pgraft extension"
          command: |
            cd pgraft
            sudo make install

  test-pgraft:
    description: "Test pgraft extension"
    steps:
      - run:
          name: "Test pgraft extension loading"
          command: |
            sudo -u postgres psql -d testdb -c "CREATE EXTENSION IF NOT EXISTS pgraft;"
      - run:
          name: "Test pgraft core functions"
          command: |
            sudo -u postgres psql -d testdb -c "SELECT pgraft_version();"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_init(1, 'localhost', 5432);"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_start();"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_get_state();"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_is_leader();"
      - run:
          name: "Test pgraft monitoring functions"
          command: |
            sudo -u postgres psql -d testdb -c "SELECT pgraft_get_cluster_health();"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_get_performance_metrics();"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_is_cluster_healthy();"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_get_system_stats();"
            sudo -u postgres psql -d testdb -c "SELECT pgraft_get_quorum_status();"

  build-ramd:
    description: "Build ramd daemon"
    steps:
      - run:
          name: "Build ramd daemon"
          command: |
            cd ramd
            make clean
            make
      - run:
          name: "Test ramd build"
          command: |
            test -f ramd/ramd
            echo "ramd daemon built successfully"

  build-ramctrl:
    description: "Build ramctrl utility"
    steps:
      - run:
          name: "Build ramctrl utility"
          command: |
            cd ramctrl
            make clean
            make
      - run:
          name: "Test ramctrl build"
          command: |
            test -f ramctrl/ramctrl
            echo "ramctrl utility built successfully"

# Define jobs
jobs:
  build-and-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-dependencies
      - setup-postgresql
      - build-pgraft
      - test-pgraft
      - build-ramd
      - build-ramctrl

  test-pgraft-only:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-dependencies
      - setup-postgresql
      - build-pgraft
      - test-pgraft

  build-components:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-dependencies
      - build-pgraft
      - build-ramd
      - build-ramctrl

# Define workflows
workflows:
  version: 2
  build-and-test:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: main
      - test-pgraft-only:
          filters:
            branches:
              only: develop
      - build-components:
          filters:
            branches:
              ignore: [main, develop]

  nightly-build:
    triggers:
      - schedule:
          cron: "0 2 * * *"  # Run at 2 AM UTC daily
    jobs:
      - build-and-test

  pull-request:
    jobs:
      - build-components
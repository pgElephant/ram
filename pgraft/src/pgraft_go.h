/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 14 "pgraft_go.go"



#include <stdlib.h>
#include <string.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Set debug logging level
//
extern void pgraft_go_set_debug(int enabled);
extern int pgraft_go_start(void);
extern int pgraft_go_stop(void);
extern char* pgraft_go_get_nodes(void);
extern char* pgraft_go_version(void);
extern int pgraft_go_test(void);
extern int pgraft_go_init(int nodeID, char* address, int port);
extern int pgraft_go_start_background(void);
extern int pgraft_go_add_peer(int nodeID, char* address, int port);
extern int pgraft_go_remove_peer(int nodeID);
extern char* pgraft_go_get_state(void);
extern int64_t pgraft_go_get_leader(void);
extern int32_t pgraft_go_get_term(void);
extern int pgraft_go_is_leader(void);
extern int pgraft_go_append_log(char* data, int length);
extern char* pgraft_go_get_stats(void);
extern char* pgraft_go_get_logs(void);
extern int pgraft_go_commit_log(long index);
extern int pgraft_go_step_message(char* data, int length);
extern char* pgraft_go_get_network_status(void);
extern void pgraft_go_free_string(char* str);
extern int pgraft_go_replicate_log_entry(char* data, int dataLen);
extern char* pgraft_go_get_replication_status(void);
extern char* pgraft_go_create_snapshot(void);
extern int pgraft_go_apply_snapshot(char* snapshotData);
extern int pgraft_go_replicate_to_node(uint64_t nodeID, char* data, int dataLen);
extern double pgraft_go_get_replication_lag(void);
extern int pgraft_go_sync_replication(void);
extern int pgraft_go_update_cluster_state(long long leaderID, long long currentTerm, char* state);

#ifdef __cplusplus
}
#endif

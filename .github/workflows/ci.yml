name: C/C++ CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        postgresql-version: [12, 13, 14, 15, 16, 17]
    
    services:
      postgres:
        image: postgres:${{ matrix.postgresql-version }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          postgresql-${{ matrix.postgresql-version }} \
          postgresql-server-dev-${{ matrix.postgresql-version }} \
          postgresql-client-${{ matrix.postgresql-version }} \
          build-essential \
          make \
          gcc \
          libc6-dev \
          pkg-config \
          libpq-dev \
          git \
          curl \
          valgrind

    - name: Set up PostgreSQL environment
      run: |
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
        sudo -u postgres psql -c "CREATE DATABASE testdb;"
        sudo -u postgres psql -c "CREATE USER testuser WITH PASSWORD 'testpass';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;"
        sudo -u postgres psql -c "ALTER USER testuser CREATEDB;"

    - name: Build pgraft extension
      run: |
        cd pgraft
        make clean
        make
        echo "pgraft extension built successfully"

    - name: Build ramd daemon
      run: |
        cd ramd
        make clean
        make
        echo "ramd daemon built successfully"

    - name: Build ramctrl utility
      run: |
        cd ramctrl
        make clean
        make
        echo "ramctrl utility built successfully"

    - name: Install pgraft extension
      run: |
        cd pgraft
        sudo make install

    - name: Test pgraft extension loading
      run: |
        sudo -u postgres psql -d testdb -c "CREATE EXTENSION IF NOT EXISTS pgraft;"
        echo "pgraft extension loaded successfully"

    - name: Test pgraft core functions
      run: |
        sudo -u postgres psql -d testdb -c "SELECT pgraft_version();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_init(1, 'localhost', 5432);"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_start();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_get_state();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_is_leader();"
        echo "Core functions test passed"

    - name: Test pgraft monitoring functions
      run: |
        sudo -u postgres psql -d testdb -c "SELECT pgraft_get_cluster_health();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_get_performance_metrics();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_is_cluster_healthy();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_get_system_stats();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_get_quorum_status();"
        echo "Monitoring functions test passed"

    - name: Test pgraft log operations
      run: |
        sudo -u postgres psql -d testdb -c "SELECT pgraft_append_log('test data 1');"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_append_log('test data 2');"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_read_log(1);"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_commit_log(2);"
        echo "Log operations test passed"

    - name: Test pgraft cluster operations
      run: |
        sudo -u postgres psql -d testdb -c "SELECT pgraft_add_node(2, 'localhost', 5433);"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_add_node(3, 'localhost', 5434);"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_get_leader();"
        sudo -u postgres psql -d testdb -c "SELECT pgraft_get_term();"
        echo "Cluster operations test passed"

    - name: Run memory check on pgraft
      run: |
        cd pgraft
        valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-out.txt make test 2>&1 || true
        cat valgrind-out.txt || echo "Valgrind completed"

    - name: Check for memory leaks
      run: |
        if [ -f pgraft/valgrind-out.txt ]; then
          if grep -q "definitely lost" pgraft/valgrind-out.txt; then
            echo "Memory leaks detected:"
            grep "definitely lost" pgraft/valgrind-out.txt
            exit 1
          else
            echo "No memory leaks detected"
          fi
        fi

    - name: Test ramd daemon
      run: |
        cd ramd
        timeout 5s ./ramd --help || echo "ramd help test completed"
        echo "ramd daemon test passed"

    - name: Test ramctrl utility
      run: |
        cd ramctrl
        timeout 5s ./ramctrl --help || echo "ramctrl help test completed"
        echo "ramctrl utility test passed"

    - name: Run static analysis
      run: |
        find . -name "*.c" -o -name "*.h" | xargs cppcheck --enable=all --inconclusive --std=c99 --suppress=missingIncludeSystem 2>&1 || true
        echo "Static analysis completed"

    - name: Check code formatting
      run: |
        find . -name "*.c" -o -name "*.h" | xargs grep -n "if(" || true
        find . -name "*.c" -o -name "*.h" | xargs grep -n "for(" || true
        find . -name "*.c" -o -name "*.h" | xargs grep -n "while(" || true
        echo "Code formatting check completed"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-postgresql-${{ matrix.postgresql-version }}
        path: |
          pgraft/valgrind-out.txt
          */test-results.txt
